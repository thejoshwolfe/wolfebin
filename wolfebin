#!/usr/bin/env python3

__version__ = "5.4"

import sys, os
import time, struct
import socket
import hashlib
import itertools
import json
from io import StringIO
bytes_to_str = lambda s: str(s, "utf8")
str_to_bytes = lambda s: bytes(s, "utf8")
coerce_unicode_to_str = lambda s: s

# config
config_path_before_user_expansion = "~/.wolfebin/config.json"
config_path = os.path.expanduser(config_path_before_user_expansion)
current_config_version = 0
config = None
default_port = 55247
chunk_size = 0x10000
def init_config(crash_on_failure=True):
    global config
    if config != None:
        return
    config = {
        "version": current_config_version,
        "server_name": "",
        "server_port": default_port,
    }
    try:
        try:
            with open(config_path) as f:
                config = json.loads(f.read())
        except IOError:
            # write defaults so that the user can look at it
            save_config()
            raise IOError
        if config["version"] > current_config_version:
            sys.exit("ERROR: wolfebin config is newer than this version of wolfebin.")
        # check values
        if config["server_name"] == "":
            raise IOError
        config["server_port"]
    except IOError:
        if crash_on_failure:
            sys.exit("ERROR: wolfebin is not configured. try running: wolfebin init")
    except (ValueError, KeyError):
        sys.exit("ERROR: wolfebin is corrupted. edit " + config_path_before_user_expansion)

def save_config():
    try:
        os.makedirs(os.path.dirname(config_path))
    except OSError:
        pass
    with open(config_path, "w") as f:
        f.write(json.dumps(config, sort_keys=True, indent=4))
        f.write("\n")

def open_connection():
    init_config()
    actual_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = (config["server_name"], config["server_port"])
    try:
        actual_connection.connect(host)
    except socket.error:
        sys.exit("ERROR: Can't connect to the wolfebin server ({}:{})".format(*host))
    return Connection(actual_connection)
class Connection:
    class Error(Exception):
        pass
    def __init__(self, actual_connection):
        self.connection = actual_connection
    def __del__(self):
        self.connection.close()
    def _read(self, length):
        chunks = []
        while length != 0:
            chunk = self.connection.recv(length)
            if len(chunk) == 0:
                break
            chunks.append(chunk)
            length -= len(chunk)
        return str_to_bytes("").join(chunks)
    def _read_fmt(self, fmt):
        data = self._read(struct.calcsize(fmt))
        return struct.unpack(fmt, data)[0]
    def _read_long(self):
        return self._read_fmt(">Q")
    def _read_string(self):
        length = self._read_long()
        return bytes_to_str(self._read(length))
    def read_json(self, pre_warning_func=lambda:None):
        result = json.loads(self._read_string())
        self.other_version = result["version"]

        try:
            error_message = result["error"]
        except KeyError:
            pass
        else:
            raise Connection.Error(error_message)

        try:
            warning_message = result["warning"]
        except KeyError:
            pass
        else:
            pre_warning_func()
            sys.stderr.write("WARNING: %s\n" % warning_message)

        return result
    def read_binary_chunk(self):
        return self._read(self.read_json()["__bin_len__"])

    def _write(self, data):
        self.connection.sendall(data)
    def _write_fmt(self, fmt, value):
        data = struct.pack(fmt, value)
        self._write(data)
    def _write_long(self, value):
        self._write_fmt(">Q", value)
    def _write_string(self, value):
        value = str_to_bytes(value)
        self._write_long(len(value))
        self._write(value)
    def write_json(self, obj):
        obj["version"] = __version__
        self._write_string(json.dumps(obj))
    def write_error(self, message):
        self.write_json({
            "error": message,
        })
    def write_warning(self, message):
        self.write_json({
            "warning": message,
        })
    def write_binary_chunk(self, chunk):
        self.write_json({
            "__bin_len__": len(chunk),
        })
        if len(chunk) != 0:
            self._write(chunk)

def int_to_human_binary(number):
    """like the -h switch for du. 2408358 -> 2.3M"""
    binary_prefixes = ["", "k", "M", "G", "T", "P", "E", "Z", "Y"]
    for prefix in binary_prefixes:
        if number < 1024:
            break
        number /= 1024.0
    else:
        # oops, overshot the last one (yeah right)
        number *= 1024
    if type(number) == float and number < 9.5:
        number_str = "%.1f" % number
    else:
        number_str = str(int(number))
    return number_str + prefix
def int_to_human_time(seconds):
    """examples: 0s  59m59s  99h59m  100h  1000000h"""
    minutes = int(seconds / 60)
    seconds = seconds % 60
    hours = int(minutes / 60)
    minutes = minutes % 60
    if hours > 99:
        return str(hours) + "h"
    if hours > 0:
        return str(hours) + "h" + str(minutes).zfill(2) + "m"
    if minutes > 0:
        return str(minutes) + "m" + str(seconds).zfill(2) + "s"
    return str(seconds) + "s"


# progress reporting
def progress(thus_far, eventual_total, time_tracker, banner_text):
    """
    [= banner ==>         ]  %55.0  86630/188k  1.2MB/s  1m23s
    bar                     percent fraction    speed    eta
    """
    # build line backwards and leave as much space as possible for the bar
    line = ""

    # eta and speed
    eta_str = ""
    speed_str = ""
    if thus_far != 0:
        if "start" not in time_tracker:
            # delay recording the start time until we get somewhere
            time_tracker["start"] = time.time()
        # we have a start time
        elapsed_time = time.time() - time_tracker["start"]
        if elapsed_time > 1.0:
            # report time after some amount of time has passed
            speed = thus_far / elapsed_time
            speed_str = int_to_human_binary(int(speed)) + "B/s"
            eta = (eventual_total - thus_far) / speed
            eta_str = int_to_human_time(int(eta))
    eta_space = len("59m59s")
    line = " " + eta_str.rjust(eta_space) + line
    speed_space = len("1023kB/s")
    line = " " + speed_str.rjust(speed_space) + line

    # fraction
    denominator_str = int_to_human_binary(eventual_total)
    numerator_space = len(str(eventual_total))
    numerator_str = str(thus_far).rjust(numerator_space)
    line = " " + numerator_str + "/" + denominator_str + line

    # percent
    percent_space = len("%100.0")
    try:
        percent = 100.0 * thus_far / eventual_total
    except ZeroDivisionError:
        percent = 100.0
    percent_str = ("%%%.1f" % percent).rjust(percent_space)
    line = " " + percent_str + line

    # bar
    console_width = get_terminal_size()[1] - 1
    bar_space = console_width - len(line)
    tick_count = bar_space - len("[>]")
    try:
        done_count = int(tick_count * thus_far / eventual_total)
    except ZeroDivisionError:
        done_count = tick_count
    todo_count = tick_count - done_count
    if done_count == 0:
        arrow = ""
    else:
        arrow_head = " " + banner_text + " =="
        arrow = "=" * (done_count - len(arrow_head)) + arrow_head
        arrow = arrow[-done_count:]
    bar_str = "[%s>%s]" % (arrow, " " * todo_count)
    line = bar_str + line

    write_to_stdout_maybe(line)
    write_to_stdout_maybe("\r")
def progress_done():
    write_to_stdout_maybe("\n")
def progress_clear():
    write_to_stdout_maybe(" " * (get_terminal_size()[1] - 1))
    write_to_stdout_maybe("\r")
def get_terminal_size():
    """ returns (lines:int, cols:int) """
    try:
        # this should work for all linux
        import fcntl, termios
        fd = 1 # stdout
        return struct.unpack("hh", fcntl.ioctl(fd, termios.TIOCGWINSZ, "1234"))
    except:
        pass
    try:
        # try windows
        import ctypes, struct
        string_buffer = ctypes.create_string_buffer(22)
        ctypes.windll.kernel32.GetConsoleScreenBufferInfo(ctypes.windll.kernel32.GetStdHandle(-12), string_buffer)
        (left, top, right, bottom) = struct.unpack("hhhhHhhhhhh", string_buffer.raw)[5:9]
        return (bottom - top + 1, right - left + 1)
    except:
        pass
    # give up
    return (25, 80)

def progress_loop(read_function, write_function, thus_far, total, time_tracker, banner_text):
    while True:
        progress(thus_far, total, time_tracker, banner_text)
        chunk = read_function()
        if len(chunk) == 0:
            break
        write_function(chunk)
        thus_far += len(chunk)
    return thus_far

def make_parent(path):
    parent = os.path.split(path)[0]
    if parent == "":
        return # assume "." always exists
    if not os.path.isdir(parent):
        os.makedirs(parent)
def full_split(path):
    parent, name = os.path.split(path)
    if parent == "":
        # will only happen for relative paths
        return [name]
    if name == "":
        # will happen for "/" or for paths ending with trailing slashes
        return [parent]
    result = full_split(parent)
    result.append(name)
    return result

# the put command
def put_func(paths, key, name_override):
    # validate name_override
    if name_override != "":
        # not totally thorough
        illegal_chars = set(r'<>:"/\|?*' + "".join(chr(x) for x in range(0x20)))
        illegal_names = [".", ".."]
        if any(c in illegal_chars for c in name_override) or name_override in illegal_names:
            sys.exit("ERROR: illegal name: " + repr(name_override))

    if paths == ("-",):
        # gotta read entire contents to get the size
        file_contents = str_to_bytes(sys.stdin.read())
        file_name = name_override
        if file_name == "":
            # make up some name
            file_name = "wolfebin-stdin.tmp"
        size = len(file_contents)
        file_infos = [{
            "name": file_name,
            "size": size,
            "contents": file_contents,
        }]
    else:
        # separate paths into files and directories
        specific_files = []
        specific_files_set = set()
        specific_dirs = []
        specific_dirs_set = set()
        for path in paths:
            abs_path = os.path.abspath(path)
            if os.path.isfile(path):
                if abs_path not in specific_files_set:
                    specific_files_set.add(abs_path)
                    specific_files.append(abs_path)
            elif os.path.isdir(path):
                if abs_path not in specific_dirs_set:
                    specific_dirs.append(abs_path)
                    specific_dirs_set.add(abs_path)
            else:
                sys.exit("ERROR: not a file or directory: " + repr(path))

        # remove paths already included by a parent directory
        for items_list, items_set in ((specific_dirs, specific_dirs_set), (specific_files, specific_files_set)):
            for specific_item in items_list[:]:
                item_parts = full_split(specific_item)
                for i in reversed(range(1, len(item_parts))):
                    ancestor = os.path.join(*item_parts[:i])
                    if ancestor in specific_dirs_set:
                        items_set.remove(specific_item)
                        items_list.remove(specific_item)

        # find every individual file to upload
        is_single_specific_item = len(specific_files) + len(specific_dirs) == 1
        file_infos = []
        for specific_file in specific_files:
            reported_name = os.path.split(specific_file)[1]
            if name_override != "":
                if is_single_specific_item:
                    reported_name = name_override
                else:
                    reported_name = name_override + "/" + reported_name
            size = os.path.getsize(specific_file)
            file_infos.append({
                "name": reported_name,
                "size": size,
                "path": specific_file,
            })
        for specific_dir in specific_dirs:
            # keep paths starting with the specific directory's name
            chop_off_this_many_parts_from_paths = len(full_split(specific_dir)) - 1
            if name_override != "" and is_single_specific_item:
                # actually, don't use the specific directory's name. override it.
                chop_off_this_many_parts_from_paths += 1
            for dirpath, dirnames, filenames in os.walk(specific_dir):
                for filename in filenames:
                    actual_path = os.path.join(dirpath, filename)
                    reported_name = "/".join(full_split(actual_path)[chop_off_this_many_parts_from_paths:])
                    if name_override != "":
                        reported_name = name_override + "/" + reported_name
                    size = os.path.getsize(actual_path)
                    file_infos.append({
                        "name": reported_name,
                        "size": size,
                        "path": actual_path,
                    })
    file_infos.sort(key=lambda file_info: file_info["name"])

    # now we're ready to talk to the server
    connection = open_connection()
    connection.write_json({
        "command": "put",
        "key": key,
        "files": [{
            "name": file_info["name"],
            "size": file_info["size"],
        } for file_info in file_infos],
        "attempt_continue": True,
    })

    continue_start = connection.read_json()["continue_start"]
    continuing = [continue_start != -1]
    continue_digester = hashlib.sha1()
    continue_skipped = [0]
    total_size = sum(file_info["size"] for file_info in file_infos)
    if continuing[0]:
        total_size_including_checksums = total_size + len(hashlib.sha1().hexdigest()) * len(file_infos)
        if continue_start == total_size_including_checksums:
            print("verifying that we already uploaded this")
        else:
            print("attempting to continue where we left off")

    start_over = [True]
    while start_over[0]:
        start_over = [False]
        thus_far = 0
        time_tracker = {}
        for file_info in file_infos:
            file_name = file_info["name"]
            digester = hashlib.sha1()
            try:
                file_handle = open(file_info["path"], "rb")
            except KeyError:
                file_handle = StringIO(file_info["contents"])
            try:
                def read_function():
                    if start_over[0]:
                        return []
                    chunk = file_handle.read(chunk_size)
                    digester.update(chunk)
                    return chunk
                def skip_chunk(chunk):
                    if not continuing[0]:
                        return chunk
                    continue_chunk = chunk[:min(len(chunk), continue_start - continue_skipped[0])]
                    continue_skipped[0] += len(continue_chunk)
                    continue_digester.update(continue_chunk)
                    if continue_skipped[0] < continue_start:
                        return ""
                    continuing[0] = False
                    # check if this was the right stuff
                    connection.write_json({
                        "continue_sha1": continue_digester.hexdigest(),
                    })
                    good = connection.read_json()["continue_good"]
                    if not good:
                        # start over
                        progress_clear()
                        print("something changed. uploading normally.")
                        start_over[0] = True
                        return ""
                    # continuing worked!
                    if continue_start != total_size_including_checksums:
                        progress_clear()
                        print("now starting the real upload")
                    # make sure we get the rest of this chunk
                    return chunk[len(continue_chunk):]
                def write_function(chunk):
                    chunk = skip_chunk(chunk)
                    if len(chunk) != 0:
                        connection.write_binary_chunk(chunk)
                thus_far = progress_loop(read_function, write_function, thus_far, total_size, time_tracker, file_name)
                if start_over[0]:
                    break
            finally:
                file_handle.close()
            if continuing[0]:
                skip_chunk(digester.hexdigest())
                if start_over[0]:
                    break
            else:
                connection.write_json({
                    "sha1": digester.hexdigest(),
                })
                connection.read_json(pre_warning_func=progress_clear)
    progress_done()

# the get command
def get_func(*keys, **kwargs):
    if len(keys) == 0:
        keys = [""]
    if len(keys) != 1:
        sys.exit("ERROR: TODO: support 'get' with multiple keys")
    [key] = keys
    output_path = kwargs["output"]
    if output_path == "-":
        global should_print_to_stdout
        should_print_to_stdout = False
    connection = open_connection()
    connection.write_json({
        "command": "get",
        "key": key,
    })
    file_infos = connection.read_json()["files"]

    root_set = set(full_split(file_info["name"])[0] for file_info in file_infos)
    output_is_stdout = False
    output_prefix = None
    output_override = None
    if output_path == "-":
        output_is_stdout = True
    elif len(root_set) > 1 or os.path.isdir(output_path):
        output_prefix = output_path + "/"
    else:
        output_override = output_path
    if output_prefix == "./":
        # "./" looks ugly
        output_prefix = None

    total_size = sum(file_info["size"] for file_info in file_infos)

    started = []
    completed_count = 0
    thus_far = 0
    time_tracker = {}
    for file_info in file_infos:
        file_name = file_info["name"]
        file_size = file_info["size"]
        if output_is_stdout:
            output_handle = sys.stdout
        else:
            if output_override != None:
                # replace the first (possibly only) part with the override
                file_name = "/".join([output_override] + full_split(file_name)[1:])
            if output_prefix != None:
                file_name = output_prefix + file_name
            started.append(file_name)
            make_parent(file_name)
            output_handle = open(file_name, "wb")
        try:
            local_size = [0]
            digester = hashlib.sha1()
            def read_function():
                if local_size[0] == file_size:
                    return []
                chunk = connection.read_binary_chunk()
                local_size[0] += len(chunk)
                digester.update(chunk)
                return chunk
            write_function = lambda chunk: output_handle.write(chunk)
            thus_far = progress_loop(read_function, write_function, thus_far, total_size, time_tracker, file_name)
        finally:
            if output_handle != sys.stdout:
                output_handle.close()
        if local_size[0] != file_size:
            # incomplete
            break
        # checksum
        checksum = connection.read_json()["sha1"]
        if checksum != digester.hexdigest():
            progress_clear()
            if len(file_infos) == 1:
                sys.stderr.write("WARNING: checksum failed\n")
            else:
                sys.stderr.write("WARNING: checksum failed for %s\n" % repr(file_name))
        progress(thus_far, total_size, time_tracker, file_name)
        completed_count += 1
    progress_done()
    if len(started) == 1:
        write_to_stdout_maybe("downloaded %s\n" % repr(started[0]))
    else:
        write_to_stdout_maybe("downloaded %i files:\n" % len(started))
        started_roots_set = set(full_split(name)[0] for name in started)
        names = []
        for name in started_roots_set:
            if os.path.isdir(name):
                name += "/"
            names.append(name)
        write_to_stdout_maybe("".join(name + "\n" for name in names))
    if completed_count < len(file_infos):
        sys.stderr.write("WARNING: download incomplete. the upload must have been interrupted.\n")

should_print_to_stdout = True
def write_to_stdout_maybe(msg):
    stream = sys.stdout
    if not should_print_to_stdout:
        stream = sys.stderr
    stream.write(msg)
    stream.flush()

# the delete command
def delete_func(*keys):
    connection = open_connection()
    connection.write_json({
        "command": "delete",
        "keys": keys,
    })
    connection.read_json()

def get_key_list():
    connection = open_connection()
    connection.write_json({
        "command": "list",
    })
    return connection.read_json()["items"]

# the list command
def list_func(*args, **kwargs):
    specific_key = None
    verbose = kwargs["verbose"]
    items = get_key_list()
    if len(args) != 0:
        arg_set = set(args)
        items = [(key, file_infos) for (key, file_infos) in items if key in arg_set]
        found_set = set(item[0] for item in items)
        [sys.stderr.write("ERROR: key not found: %s\n" % key) for key in args if key not in found_set]
    if not verbose:
        # key names
        print(repr([item[0] for item in items]))
        return
    max_key_len = max((len(repr(item[0])) for item in items), default=0)
    max_key_len = min(max_key_len, 32)
    justifiy_size = lambda size: int_to_human_binary(size).rjust(len("1023k")) + "B"
    for (key, file_infos) in sorted(items):
        file_infos = file_infos["files"]
        justified_key = repr(key).ljust(max_key_len)
        total_size = sum(file_info["size"] for file_info in file_infos)
        print("%s %s %i files:" % (
            justified_key,
            justifiy_size(total_size),
            len(file_infos),
        ))
        indentation = " " * (max_key_len + len(justifiy_size(0)))
        for file_info in file_infos:
            print("%s %s %s" % (
                indentation,
                justifiy_size(file_info["size"]),
                file_info["name"],
            ))

def init_func():
    init_config(crash_on_failure=False)
    try:
        previous_hostname = ""
        if config["server_name"] != "":
            previous_hostname = "(%s) " % config["server_name"]
        while True:
            hostname = input("enter the hostname or I.P. address of the server.\n%s> " % previous_hostname)
            if hostname == "":
                hostname = config["server_name"]
            if hostname != "":
                break
        config["server_name"] = hostname
        save_config()
        if not input("test connection to %s?\n[Yn] " % hostname).lower().startswith("n"):
            get_key_list()
            print("it works!")
    except KeyboardInterrupt:
        print("")


bash_completion_path = "/etc/bash_completion.d/wolfebin"
def install_func():
    with open(bash_completion_path, "w") as f:
        f.write("""\
# bash completion for wolfebin

_wolfebin()
{
    # Simply doing `COMPREPLY=($(wolfebin ...))` splits on space regardless of
    # backslash escapes, so it won't work for completion including spaces.
    # Doing `wolfebin ... | readarray -t COMPREPLY` doesn't modify the
    # COMPREPLY variable at all, probably because of scoping issues.
    # Looks like we HAVE to use a temp file. Darn.
    # We have to check if the file is empty, or else we say there's a single
    # suggestion which is the empty string.
    tmp=$(mktemp)
    wolfebin bash-completion "${COMP_POINT}" "${COMP_LINE}" "${COMP_KEY}" "${COMP_TYPE}" "${COMP_CWORD}" "${COMP_WORDS[@]}" > $tmp
    if [[ -s $tmp ]]; then
        readarray -t COMPREPLY < $tmp
    fi
    rm -f $tmp
} &&
complete -F _wolfebin -o default wolfebin
""")

version_to_tuple = lambda version: tuple(int(x) for x in version.split("."))
def version_func():
    print("client version: " + __version__)
    connection = open_connection()
    connection.write_json({})
    connection.read_json()
    server_version = connection.other_version
    print("server version: " + server_version)
    if version_to_tuple(__version__) < version_to_tuple(server_version):
        print("try the 'upgrade' command to update your client to the latest version.")


def upgrade_func():
    connection = open_connection()
    connection.write_json({
        "command": "upgrade",
    })
    wolfebin_source = connection.read_json()["wolfebin"]
    ours = version_to_tuple(__version__)
    theirs = version_to_tuple(connection.other_version)
    if ours == theirs:
        print("already up to date")
        return
    if ours > theirs:
        sys.exit("ERROR: server version is older than client version")
    path_to_self = os.path.realpath(sys.argv[0])
    print("updating: " + path_to_self)
    with open(path_to_self, "w") as f:
        f.write(wolfebin_source)

prog = "wolfebin"
def command_line_main():
    import optparse
    global prog
    prog = os.path.split(sys.argv[0])[1]
    usage_variables = {"prog": prog}
    class Command:
        def __init__(self, parser, names, args_range, func):
            self.parser = parser
            self.names = names
            self.args_range = args_range
            self.func = func
    commands = []

    get_parser = optparse.OptionParser(usage="%(prog)s get [KEY...] [-o PATH]" % usage_variables, description=\
        "Download something. If KEY... is omitted, it defaults to \"\"."
    )
    get_parser.add_option("-o", "--output", metavar="PATH", default=".", help=\
        "write file into PATH. if PATH is a directory, uses the file's " + \
        "original name in the directory. otherwise, uses PATH as the file " + \
        "to save to. default is \".\"."
    )
    commands.append(Command(get_parser, ["get"], (0, float("inf")), get_func))

    put_parser = optparse.OptionParser(usage="%(prog)s [put] [-k KEY] [-n NAME] file..." % usage_variables, description=\
        "Upload something."
    )
    put_parser.add_option("-k", "--key", metavar="KEY", default="", help=\
        "use a special identifier to not override the default slot. " + \
        "download it later using the same key. " + \
        "if omitted, the default key is \"\"."
    )
    put_parser.add_option("-n", "--name", metavar="NAME", dest="name_override", default="", help=\
        "name the file NAME when it is downloaded. " + \
        "the default uses the real name of the file. " + \
        "if a single directory is given, this option is the new name of the directory. " + \
        "if multiple files/directories are given, this option encloses them in a directory."
    )
    commands.append(Command(put_parser, ["put"], (1, float("inf")), lambda *args, **kwargs: put_func(args, **kwargs)))

    delete_parser = optparse.OptionParser(usage="%(prog)s delete KEY..." % usage_variables, description=\
        "Delete the entries with the specified keys."
    )
    commands.append(Command(delete_parser, ["delete"], (1, float("inf")), delete_func))

    list_parser = optparse.OptionParser(usage="%(prog)s list [KEY...]" % usage_variables, description=\
        "List exisitng keys."
    )
    list_parser.add_option("-v", "--verbose", action="store_true")
    commands.append(Command(list_parser, ["list", "ls"], (0, float("inf")), list_func))

    init_parser = optparse.OptionParser(usage="%(prog)s init" % usage_variables, description=\
        "Interactive first-time setup.",
    )
    commands.append(Command(init_parser, ["init"], (0, 0), init_func))

    install_parser = optparse.OptionParser(usage="sudo %(prog)s install[-bash-completion]" % usage_variables, description=\
        "Install bash completion to " + bash_completion_path + ".",
    )
    commands.append(Command(install_parser, ["install", "install-bash-completion"], (0, 0), install_func))

    version_parser = optparse.OptionParser(usage="%(prog)s version" % usage_variables, description=\
        "query the server version, and offer the possibility of upgrading this client.",
    )
    commands.append(Command(version_parser, ["version"], (0, 0), version_func))

    upgrade_parser = optparse.OptionParser(usage="%(prog)s upgrade" % usage_variables, description=\
        "upgrade this client if it's older than the one provided by the server.",
    )
    commands.append(Command(upgrade_parser, ["upgrade", "update"], (0, 0), upgrade_func))

    usage_variables["main_names"] = "|".join(command.names[0] for command in commands)
    help_parser = optparse.OptionParser(usage="%(prog)s help [%(main_names)s]" % usage_variables, description=\
        "Print help for commands",
    )
    def help_func(command_name=""):
        if command_name == "":
            sys.exit(main_usage)
        try:
            command = name_to_command[command_name]
        except KeyError:
            sys.stderr.write("ERROR: invalid command: " + command_name + "\n")
            print("command names:\n" + "\n".join("    " + name for name in sorted(name_to_command.keys())))
            sys.exit(1)
        command.parser.print_help()
        sys.exit(1)
    commands.append(Command(help_parser, ["help"], (0, 1), help_func))

    name_to_command = dict((name, command) for command in commands for name in command.names)
    main_usage = "Usage:\n" + "\n".join(command.parser.get_usage()[len("Usage: "):-len("\n")] for command in commands)

    def perform_bash_completion(args):
        def get_bash_completion_options(word, words_index, words):
            if words_index == 1:
                # assist with command name
                return name_to_command.keys()
            # there is a named command
            try:
                command = name_to_command[words[1]]
            except KeyError:
                # bad command. can't help you.
                return ()
            name_to_option = dict((name, option) for option in command.parser.option_list for name in itertools.chain(option._short_opts, option._long_opts))
            if word.startswith("-"):
                # it's a switch
                return name_to_option.keys()
            # it's not a switch
            previous_word = words[words_index - 1]
            def get_just_the_keys():
                return (item[0] for item in get_key_list())
            if previous_word.startswith("-"):
                # previous word was a switch
                try:
                    option = name_to_option[previous_word]
                except KeyError:
                    # can't help you
                    return ()
                if option.takes_value():
                    if option.metavar == "KEY":
                        # do a list to find out how to complete this
                        return get_just_the_keys()
                    # can't help you with the value for this switch
                    return ()
                # the switch doesn't take a value, so nevermind
            # asking for completion on just a regular arg
            if command.parser.usage.find("KEY...") != -1:
                # args are keys. we can help.
                return get_just_the_keys()
            # you're probably just looking for files
            return ()

        line_index = int(args[0])
        line = args[1]
        pressed_key = chr(int(args[2]))
        completion_type = chr(int(args[3]))
        words_index = int(args[4])
        words = args[5:]
        word = words[words_index]
        def bash_escape(s):
            """escape special chars with backslashes"""
            special_characters = "\\ #;&\"\',`:!*?${}()[]><|"
            for c in special_characters:
                s = s.replace(c, "\\" + c)
            return s
        def bash_resolve(s):
            """resolve backslash escapes and nested quotes"""
            # it's too bad shlex doesn't work with backslashes
            chars = []
            inside_single_quotes = False
            inside_double_quotes = False
            index = 0
            while index < len(s):
                c = s[index]
                index += 1
                if inside_single_quotes:
                    if c == "'":
                        inside_single_quotes = False
                    else:
                        chars.append(c)
                else:
                    if c == "'":
                        if inside_double_quotes:
                            chars.append(c)
                        else:
                            inside_single_quotes = True
                    elif c == "\\":
                        if index < len(s):
                            chars.append(s[index])
                        index += 1
                    elif c == '"':
                        inside_double_quotes = not inside_double_quotes
                    else:
                        chars.append(c)
            return "".join(chars)
        # normalize the word
        word = bash_escape(bash_resolve(word))
        options = get_bash_completion_options(word, words_index, words)
        options = set(bash_escape(option) for option in options)
        results = [option for option in options if option.startswith(word)]
        return "\n".join(results)

    args = sys.argv[1:]
    # handle some cases specifically
    if len(args) == 0 or args[0] in ("-h", "--help"):
        sys.exit(main_usage)
    if args[0] in ("--version",):
        sys.exit(__version__)
    if args[0] == "bash-completion":
        try:
            sys.stdout.write(perform_bash_completion(args[1:]))
        except: # even catch sys.exit.
            pass
        return

    command_name = args[0]
    command_is_a_file = os.path.exists(command_name)
    args = args[1:]
    try:
        command = name_to_command[command_name]
    except KeyError:
        if command_is_a_file:
            # implied 'put' command
            command = name_to_command["put"]
            args = [command_name] + args
        else:
            sys.exit("ERROR: Unknown command, and not an existing path: " + command_name + "\n\n" + main_usage)
    else:
        if command_is_a_file:
            sys.stderr.write("WARNING: interpreting \"%s\" as a command. use \"./%s\" to interpret as a path instead.\n" % (command_name, command_name))
    (options, args) = command.parser.parse_args(args)
    if len(args) < command.args_range[0] or len(args) > command.args_range[1]:
        sys.exit("Wrong number of arguments for command '" + command_name + "'.")
    try:
        command.func(*args, **options.__dict__)
    except Connection.Error as e:
        print("\n".join("ERROR: " + line for line in e.args[0].split("\n")))

if __name__ == "__main__":
    command_line_main()

